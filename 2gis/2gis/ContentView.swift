//
//  ContentView.swift
//  2gis
//
//  Created by –ü–∞–≤–µ–ª on 04.10.2025.
//

import SwiftUI
import RealityKit
import Observation

struct ContentView: View {
    @Environment(AppModel.self) private var appModel
    @Environment(\.openImmersiveSpace) private var openImmersiveSpace
    @Environment(\.dismissImmersiveSpace) private var dismissImmersiveSpace
    @Environment(\.openWindow) private var openWindow

    @State private var navigationViewModel = NavigationViewModel()
    @State private var catalogViewModel = CatalogFlowViewModel()
    
    @State private var destPoint: RoutePoint = RoutePoint(lon: 0, lat: 0, type: RoutePoint.PointType.stop)
    @State private var destinationPlaceText: String = ""
    
    @State private var lonText: String = "37.625325"
    @State private var latText: String = "55.695281"

    // NEW:
    @State private var locationService = LocationService()

    var body: some View {
        ScrollView {
            VStack(spacing: 24) {
            // –í—ã–±–æ—Ä —Å—Ü–µ–Ω—ã
            // ScenePickerView(appModel: appModel)

            // –¢–µ–∫—É—â–∏–µ GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            gpsBlock

            Divider()

            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Navigation API
                NavigationDemoView(viewModel: navigationViewModel, addrText: $destinationPlaceText, locationService: $locationService, destPoint: $destPoint)

            Divider()

            // –ö–∞—Ç–∞–ª–æ–≥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            CatalogFlowSection(viewModel: catalogViewModel, lonText: $lonText, latText: $latText)
            }
            .padding(24)
        }
        .onAppear {
            locationService.distanceThresholdMeters = 1.0
            locationService.start()
            if appModel.selectedScene == .arrow && !appModel.hasOpenedArrowWindowOnce {
                openWindow(id: "ArrowWindow1")
                openWindow(id: "ArrowWindow2")
                openWindow(id: "ArrowWindow3")
                appModel.hasOpenedArrowWindowOnce = true
            }
//            Task { await updateImmersiveSpace(for: appModel.selectedScene) }
        }
        .onChange(of: locationService.currentLocation) { _, newLoc in
            guard let loc = newLoc else { return }
            lonText = String(format: "%.6f", loc.coordinate.longitude)
            latText = String(format: "%.6f", loc.coordinate.latitude)
    
            if locationService.checkAndSnapIfNeeded() {
                Task {
                    await catalogViewModel.run(lon: loc.coordinate.longitude, lat: loc.coordinate.latitude)
                }
            }
        }
        // ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã: –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–∞ —Å—Ç—Ä–µ–ª–æ–∫ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å Immersive
        .onChange(of: appModel.selectedScene) { _, newSelection in
            Task {
                if newSelection == .arrow && !appModel.hasOpenedArrowWindowOnce {
                    openWindow(id: "ArrowWindow1")
                    openWindow(id: "ArrowWindow2")
                    openWindow(id: "ArrowWindow3")
                    appModel.hasOpenedArrowWindowOnce = true
                }
//                await updateImmersiveSpace(for: newSelection)
            }
        }
    }


    private var gpsBlock: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("GPS")
                .font(.title3).bold()
            switch locationService.status {
            case .authorized:
                if let loc = locationService.currentLocation {
                    Text(String(format: "Lat: %.6f, Lon: %.6f (¬±%.0f –º)",
                                loc.coordinate.latitude,
                                loc.coordinate.longitude,
                                loc.horizontalAccuracy))
                        .font(.callout)
                        .foregroundStyle(.secondary)
                } else {
                    Text("–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö‚Ä¶").foregroundStyle(.secondary)
                }
            case .requesting:
                Text("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ‚Ä¶").foregroundStyle(.secondary)
            case .denied:
                Text("–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
                    .foregroundStyle(.red)
            case .restricted:
                Text("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã).")
                    .foregroundStyle(.red)
            case .idle:
                Text("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞‚Ä¶").foregroundStyle(.secondary)
            }
        }
        .frame(maxWidth: .infinity, alignment: .leading)
        .padding()
        .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 12))
    }

    // @MainActor
    // private func updateImmersiveSpace(for selection: AppModel.SceneSelection) async {
    //     // üö´ –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –º–µ–Ω—é ‚Äî –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã–≤–∞—Ç—å Immersive
    //     guard appModel.uiMode == .immersive else { return }

    //     switch appModel.immersiveSpaceState {
    //     case .closed:
    //         appModel.immersiveSpaceState = .inTransition
    //         let result = await openImmersiveSpace(id: appModel.immersiveSpaceID)
    //         switch result {
    //         case .opened: break
    //         case .userCancelled, .error: appModel.immersiveSpaceState = .closed
    //         @unknown default: appModel.immersiveSpaceState = .closed
    //         }
    //     case .open, .inTransition:
    //         break
    //     }
    // }
}

private struct ScenePickerView: View {
    @Bindable var appModel: AppModel

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("–í—ã–±–æ—Ä —Å—Ü–µ–Ω—ã")
                .font(.headline)

            Picker("–°—Ü–µ–Ω–∞", selection: $appModel.selectedScene) {
                Text("–ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä–µ–ª–∫–∞").tag(AppModel.SceneSelection.arrow)
                Text("3D –∫—É–±").tag(AppModel.SceneSelection.cube)
            }
            .pickerStyle(.segmented)
        }
        .frame(maxWidth: .infinity, alignment: .leading)
    }
}

private struct ScenePreview: View {
    let selection: AppModel.SceneSelection
    @Environment(\.openWindow) private var openWindow

    var body: some View {
        switch selection {
        case .arrow:
            VStack(alignment: .leading, spacing: 12) {
                Label("–û–∫–Ω–∞ —Å–æ —Å—Ç—Ä–µ–ª–∫–æ–π", systemImage: "rectangle.on.rectangle")
                    .font(.headline)
                Text("–¢—Ä–∏ –æ–∫–Ω–∞ —Å–æ —Å—Ç—Ä–µ–ª–∫–æ–π –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –í –∏–º–º–µ—Ä—Å–∏–≤–Ω–æ–π —Å—Ü–µ–Ω–µ –ø–æ–∫–∞–∑–∞–Ω—ã —Ç—Ä–∏ —Å—Ç—Ä–µ–ª–∫–∏ —Å —à–∞–≥–æ–º 1 –º –ø–æ –≥–ª—É–±–∏–Ω–µ.")
                    .font(.callout)
                    .foregroundStyle(.secondary)
            }
            .padding()
            .frame(maxWidth: .infinity, alignment: .leading)
            .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 20))

        case .cube:
            VStack(alignment: .leading, spacing: 12) {
                Image(systemName: "cube")
                    .font(.largeTitle)
                Text("–ö—É–± –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∏–º–º–µ—Ä—Å–∏–≤–Ω–æ–π —Å—Ü–µ–Ω–µ –ø–µ—Ä–µ–¥ –≤–∞–º–∏. –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å —Å–≤–æ–±–æ–¥–Ω–æ ‚Äî –æ–±—ä–µ–∫—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.")
                    .font(.callout)
            }
            .padding()
            .frame(maxWidth: .infinity, alignment: .leading)
            .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 20))
        }
    }
}

private struct NavigationDemoView: View {
    @Bindable var viewModel: NavigationViewModel
    @Binding var addrText: String
    @Binding var locationService: LocationService
    @Binding var destPoint: RoutePoint

    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("2GIS Navigation APIs")
                .font(.title2)
                .bold()

            TextField("addr", text: $addrText)
                .textFieldStyle(.roundedBorder)
                .keyboardType(.numbersAndPunctuation)
            
            Button(action: savePointFromAddr) {
                Label("–ù–∞–π—Ç–∏ –∞–¥—Ä–µ—Å—Å—Å", systemImage: "house")
            }
            

            HStack {
                Button(action: loadRoute) {
                    Label("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", systemImage: "car")
                }
                .disabled(viewModel.isLoading)

                // Button(action: loadMapMatch) {
                //     Label("Map matching", systemImage: "map")
                // }
                // .disabled(viewModel.isLoading)

                // Button(action: loadGeolocation) {
                //     Label("Radar –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è", systemImage: "location.north.line")
                // }
                // .disabled(viewModel.isLoading)
            }
            .buttonStyle(.borderedProminent)

            if viewModel.isLoading {
                ProgressView()
            }

            if let error = viewModel.errorMessage {
                Text(error)
                    .foregroundStyle(Color.red)
            }

            if let route = viewModel.lastRouteResponse?.result?.first {
                VStack(alignment: .leading, spacing: 8) {
                    Text("–ú–∞—Ä—à—Ä—É—Ç: \(route.id ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")")
                        .font(.headline)
                    if let algorithm = route.algorithm {
                        Text("–ê–ª–≥–æ—Ä–∏—Ç–º: \(algorithm)")
                            .font(.subheadline)
                    }
                    if let maneuvers = route.maneuvers {
                        Text("–ú–∞–Ω—ë–≤—Ä—ã")
                            .font(.subheadline)
                            .bold()
                        ForEach(Array(maneuvers.prefix(3).enumerated()), id: \.offset) { index, maneuver in
                            Text("\(index + 1). \(maneuver.comment ?? "‚Äî")")
                                .font(.footnote)
                        }
                    }
                }
                .frame(maxWidth: .infinity, alignment: .leading)
                .padding()
                .background(.thinMaterial, in: RoundedRectangle(cornerRadius: 12))
            }

            // if let mapMatch = viewModel.lastMapMatchResponse {
            //     VStack(alignment: .leading, spacing: 8) {
            //         Text("Map matching")
            //             .font(.headline)
            //         if let distance = mapMatch.distance {
            //             Text(String(format: "–î–ª–∏–Ω–∞: %.0f –º", distance))
            //         }
            //         if let duration = mapMatch.duration {
            //             Text(String(format: "–í—Ä–µ–º—è: %.0f —Å", duration))
            //         }
            //         if let status = mapMatch.status {
            //             Text("–°—Ç–∞—Ç—É—Å: \(status)")
            //                 .font(.footnote)
            //         }
            //     }
            //     .frame(maxWidth: .infinity, alignment: .leading)
            //     .padding()
            //     .background(.thinMaterial, in: RoundedRectangle(cornerRadius: 12))
            // }

            // if let location = viewModel.lastGeolocationResponse?.location {
            //     VStack(alignment: .leading, spacing: 8) {
            //         Text("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è Radar")
            //             .font(.headline)
            //         if let latitude = location.latitude, let longitude = location.longitude {
            //             Text(String(format: "Lat: %.5f, Lon: %.5f", latitude, longitude))
            //         }
            //         if let accuracy = location.accuracy {
            //             Text(String(format: "–¢–æ—á–Ω–æ—Å—Ç—å: %.0f –º", accuracy))
            //         }
            //     }
            //     .frame(maxWidth: .infinity, alignment: .leading)
            //     .padding()
            //     .background(.thinMaterial, in: RoundedRectangle(cornerRadius: 12))
            // }
        }
    }
    
    private func savePointFromAddr() {
        Task { 
            do {
                let client = DGisPlacesClient(
                    config: DGisPlacesClient.Config(apiKey: "6fe4cc7a-89b8-4aec-a5c3-ac94224044fe")
                )

                // bestMatch –±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                let best = try await client.bestMatch(self.addrText)

                // –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞—Å–ø–∞–∫—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                guard let p = best.point,
                      let lon = p.lon,
                      let lat = p.lat else {
                    return
                }

                // –æ–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                await MainActor.run {
                    self.addrText = best.addressName ?? best.name

                    // –í–ê–†–ò–ê–ù–¢ 1: –µ—Å–ª–∏ —É —Ç–µ–±—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–º–µ—á–µ–Ω–Ω—ã–π:
                    self.destPoint = RoutePoint(lon: best.point!.lon!, lat: best.point!.lat!, type:RoutePoint.PointType.stop)

                    // –í–ê–†–ò–ê–ù–¢ 2: –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –µ—â—ë type:
                    // self.destPoint = RoutePoint(lon: lon, lat: lat, type: .pref)

                    // –í–ê–†–ò–ê–ù–¢ 3: –µ—Å–ª–∏ —É —Ç–µ–±—è –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π init:
                    // self.destPoint = RoutePoint(lon, lat)
                }
            } catch {
                // –æ–±—Ä–∞–±–æ—Ç–∞–π/–∑–∞–ª–æ–≥—É–π –æ—à–∏–±–∫—É
                print("Search failed:", error)
            }
        }
    }


    private func loadRoute() {
        Task { await viewModel.loadSampleRoute(locationService: locationService, destinationPoint:destPoint) }
    }

    private func loadMapMatch() {
        Task { await viewModel.loadSampleMapMatch() }
    }

    private func loadGeolocation() {
        Task { await viewModel.loadSampleGeolocation() }
    }
}

private struct CatalogFlowSection: View {
    @Bindable var viewModel: CatalogFlowViewModel
    @Binding var lonText: String
    @Binding var latText: String

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("–ó–¥–∞–Ω–∏–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ")
                .font(.title3)
                .bold()

            HStack(spacing: 12) {
                TextField("lon", text: $lonText)
                    .textFieldStyle(.roundedBorder)
                    .keyboardType(.numbersAndPunctuation)
                TextField("lat", text: $latText)
                    .textFieldStyle(.roundedBorder)
                    .keyboardType(.numbersAndPunctuation)
                Button {
                    Task {
                        if let lon = Double(lonText), let lat = Double(latText) {
                            await viewModel.run(lon: lon, lat: lat)
                        }
                    }
                } label: {
                    Label("–ù–∞–π—Ç–∏", systemImage: "building.2")
                }
                .disabled(viewModel.isRunning)
            }

            if viewModel.isRunning { ProgressView() }

            if let result = viewModel.lastResult {
                if let b = result.building {
                    VStack(alignment: .leading, spacing: 4) {
                        Text(b.name).font(.headline)
                        if let addr = b.addressName { Text(addr).font(.subheadline) }
                        HStack(spacing: 8) {
                            if let floors = b.floors { Text("–≠—Ç–∞–∂–µ–π: \(floors)") }
                            if let material = b.structureInfo?.material { Text("–ú–∞—Ç–µ—Ä–∏–∞–ª: \(material)") }
                            if let year = b.structureInfo?.yearOfConstruction { Text("–ì–æ–¥: \(year)") }
                        }
                    }
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .padding()
                    .background(.thinMaterial, in: RoundedRectangle(cornerRadius: 12))
                } else {
                    Text("–ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π").foregroundStyle(.secondary)
                }

                if !result.organizations.isEmpty {
                    VStack(alignment: .leading, spacing: 8) {
                        Text("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏")
                            .font(.headline)
                        ForEach(result.organizations, id: \.id) { org in
                            VStack(alignment: .leading, spacing: 2) {
                                Text(org.name ?? "‚Äî").font(.subheadline).bold()
                                if let addr = org.addressName { Text(addr).font(.footnote).foregroundStyle(.secondary) }
                                if let rub = org.rubrics?.compactMap({ $0.name }).first { Text(rub).font(.footnote) }
                            }
                            .padding(8)
                            .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 10))
                        }
                    }
                } else {
                    Text("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã").foregroundStyle(.secondary)
                }

                if !result.diagnostics.isEmpty {
                    Text(result.diagnostics.joined(separator: " ¬∑ "))
                        .font(.footnote)
                        .foregroundStyle(.secondary)
                }
            }
        }
    }
}

#Preview(windowStyle: .automatic) {
    ContentView()
        .environment(AppModel())
}
